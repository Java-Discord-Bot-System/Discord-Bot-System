import java.util.concurrent.*
import org.kohsuke.github.*
import org.eclipse.jgit.api.Git

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.kohsuke:github-api:1.73'
		classpath 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

subprojects {
	apply plugin: 'java'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		 jcenter()
	}

	dependencies {
		compile fileTree(dir: 'lib', include: '*.jar')
	}

	version = '1.0'

	jar {
		manifest.attributes provider: 'gradle'
	}
	
	configurations{
 		providedCompile
 		compile.extendsFrom providedCompile
	}
  	dependencies{
 		providedCompile files('server/lib/weblogic.jar');
 	}
	
	task exportDependencies (type: Copy){
		if (project.name.startsWith("Plugin ")) {
			dependsOn build
			File directory = new File(projectDir.parentFile, "export/plugins/${project.name.replaceFirst("Plugin ", "")}/lib/")
			into directory
			from (configurations.runtime - project(":Core").configurations.runtime).exclude project(":Core").jar.outputs.files.files*.name
		}
	}
	
	task exportJar (type: Copy){
		if (project.name.startsWith("Plugin ")) {
			dependsOn build, exportDependencies
			File directory = new File(projectDir.parentFile, "export/plugins/${project.name.replaceFirst("Plugin ", "")}")
			new File(directory, "Plugin.jar").delete()
			into directory
			from (project.jar.outputs.files.files) {
				rename {"Plugin.jar"}
			}
		}
	}
	
	task export (type: Copy){
		if (project.name.startsWith("Plugin ")) {
			dependsOn exportJar, exportDependencies
		}
	}
}

task export() {
	
}


task setupWorkspace << {
	ExecutorService executor = Executors.newCachedThreadPool()

	println "Searching for Core and JDA..."
	File core = new File("Core")
	if (!core.exists()||core.listFiles().size()==1) {
		executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/Core.git",core))
	}
	File jda = new File("JDA")
	if (!jda.exists()||jda.listFiles().size()==1) {
		executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/JDA.git",jda))
	}

	if (downloadPluginsProp as boolean) {
		println "Searching for plugins..."
		GitHub.connectAnonymously().getOrganization("Java-Discord-Bot-System").repositories().each { String k, GHRepository v ->
			if (k.startsWith("Plugin-")) {
				if(!file.exists()||file.listFiles().size()==1) {
					executor.submit(cloneRepository(v.gitTransportUrl.toString(), new File(k.replace("-", " "))))
				}
			}
		}
	}

	if (downloadTemplateProp as boolean) {
		println "Searching for template..."
		File file = new File("Template")
		if (!file.exists()||file.listFiles().size()==1) {
			executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/Template.git", file))
		}
	}

	executor.shutdown()

	try {
		println "Waiting for all downloads to be finished. This can need some time!"
		executor.awaitTermination(10, TimeUnit.MINUTES)
	} catch (InterruptedException e) {
		println "Downloading needed waaay too long (over 10 minutes)"
		println "Cancelling..."
	}
}

Runnable cloneRepository(String url, File directory){
	println "Downloading ${directory.name}..."
	return {
		directory.delete()
		try {
			Git.cloneRepository().with { directory = directory; URI = url; delegate}.call().repository.close()
		} catch (org.eclipse.jgit.api.errors.GitAPIException e) {
			e.printStackTrace()
		}
	} as Runnable
}
