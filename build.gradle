buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.kohsuke:github-api:1.73'
		classpath 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
	}
}

task wrapper(type: Wrapper) {
		gradleVersion = '2.12'
}

subprojects {
	apply plugin: 'java'

	repositories {
		 jcenter()
	}

	dependencies {
		compile fileTree(dir: 'lib', include: '*.jar')
	}

	version = '1.0'

	jar {
		manifest.attributes provider: 'gradle'
	}
}

task setupWorkspace << {
	java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newCachedThreadPool();

	println "Searching for Core and JDA..."
	File core = new File("Core");
	if (!core.exists()||core.listFiles().size()==1) {
		executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/Core.git",core));
	}
	File jda = new File("JDA");
	if (!jda.exists()||jda.listFiles().size()==1) {
		executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/JDA.git",jda));
	}

	boolean downloadPlugins = Boolean.valueOf(downloadPluginsProp)

	if (downloadPlugins) {
		println "Searching for plugins..."
		org.kohsuke.github.GitHub github = org.kohsuke.github.GitHub.connectAnonymously();
		org.kohsuke.github.GHOrganization organization = github.getOrganization("Java-Discord-Bot-System");
		Map<String, org.kohsuke.github.GHRepository> repos = organization.getRepositories();
		for (java.util.Map.Entry<String, org.kohsuke.github.GHRepository> repo : repos.entrySet()) {
			if (repo.getKey().startsWith("Plugin-")) {
				File file = new File(repo.getKey().replace("-", " "));
				if(!file.exists()||file.listFiles().size()==1) {
					executor.submit(cloneRepository(repo.getValue().getGitTransportUrl().toString(), file));
				}
			}
		}
	}

	boolean downloadTemplate = Boolean.valueOf(downloadTemplateProp)
	if (downloadTemplate) {
		println "Searching for template..."
		File file = new File("Template");
		if (!file.exists()||file.listFiles().size()==1) {
			executor.submit(cloneRepository("git://github.com/Java-Discord-Bot-System/Template.git", file));
		}
	}

	executor.shutdown();

	try {
		println "Waiting for all downloads to be finished. This can need some time!"
		executor.awaitTermination(10, java.util.concurrent.TimeUnit.MINUTES);
	} catch (InterruptedException e) {
		println "Downloading needed waaay too long (over 10 minutes)"
		println "Cancelling..."
	}
}

public static Runnable cloneRepository(String url, File directory){
	println "Downloading "+directory.getName() +"..."
	return new Runnable() {
			@Override
			public void run() {
				directory.delete();
				try {
					org.eclipse.jgit.api.Git.cloneRepository().setDirectory(directory).setURI(url).call().getRepository().close()
				} catch (org.eclipse.jgit.api.errors.GitAPIException e) {
					e.printStackTrace();
				}
			}
	}
}
